{"version":3,"sources":["Components/AdmissionForm/AdmissionForm.module.css","Components/StudentResultBoard/StudentResultBoard.js","Components/AdmissionForm/AdmissionForm.js","App.js","serviceWorker.js","index.js","Components/StudentResultBoard/StudentResultBoard.module.css"],"names":["module","exports","StudentResultBoard","useState","data","setData","history","useHistory","useEffect","api","sorted","sort","a","b","name","localeCompare","forEach","student","parseInt","marks","Maths","Science","English","status","totalMarks","console","log","className","styles","container","btnContainer","onClick","push","btn","table","title","head","map","index","row","style","color","key","rollNumber","AdmissionForm","setName","lastname","setLastName","clas","setClas","year","setYear","percentage","setPercentage","valid","setValid","testName","undefined","test","length","error","btnStudent","onSubmit","e","preventDefault","submitForm","form","label","for","type","input","id","onChange","target","value","required","disabled","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.762b74a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AdmissionForm_container__sqFu0\",\"btnContainer\":\"AdmissionForm_btnContainer__hjgGp\",\"btnStudent\":\"AdmissionForm_btnStudent__2mdzH\",\"form\":\"AdmissionForm_form__urQ5G\",\"head\":\"AdmissionForm_head__2wtCV\",\"label\":\"AdmissionForm_label__1wTxH\",\"input\":\"AdmissionForm_input__nU4xQ\",\"btn\":\"AdmissionForm_btn__2ym5f\"};","import React, { useEffect, useState } from \"react\";\nimport styles from \"./StudentResultBoard.module.css\";\nimport api from \"../../Api.json\";\nimport { useHistory } from \"react-router-dom\";\n\nconst StudentResultBoard = () => {\n  const [data, setData] = useState([]);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    setData(api);\n  }, []);\n\n  let sorted = data.sort((a, b) => a.name.localeCompare(b.name));\n\n  sorted.forEach((student) => {\n    if (\n      parseInt(student.marks.Maths) > 20 &&\n      parseInt(student.marks.Science) > 20 &&\n      parseInt(student.marks.English) > 20\n    ) {\n      student.status = \"Pass\";\n      student.totalMarks =\n        parseInt(student.marks.Maths) +\n        parseInt(student.marks.Science) +\n        parseInt(student.marks.English);\n    } else {\n      student.status = \"Fail\";\n      student.totalMarks =\n        parseInt(student.marks.Maths) +\n        parseInt(student.marks.Science) +\n        parseInt(student.marks.English);\n    }\n  });\n\n  const addmissionForm = () => {\n    history.push(\"/addmissionform\");\n  };\n  console.log(sorted);\n  return (\n    <div className={styles.container}>\n      <div className={styles.btnContainer}>\n        <button onClick={() => addmissionForm()} className={styles.btn}>\n          Admission Form\n        </button>\n      </div>\n      <div>\n        <table className={styles.table}>\n          <caption className={styles.title}>Student Result Board</caption>\n          <thead>\n            <tr className={styles.head}>\n              <th>Student Name</th>\n              <th>Roll Number</th>\n              <th>Total Marks</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            {sorted.map((student, index) => (\n              <tr\n                className={styles.row}\n                style={\n                  student.status === \"Fail\"\n                    ? { color: \"red\" }\n                    : { color: \"green\" }\n                }\n                key={index}\n              >\n                <td className={styles.name}>{student.name}</td>\n                <td>{student.rollNumber}</td>\n                <td>{student.totalMarks}</td>\n                <td>{student.status}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default StudentResultBoard;\n","import React, { useState, useEffect } from \"react\";\nimport styles from \"./AdmissionForm.module.css\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AdmissionForm = () => {\n  const [name, setName] = useState(\"\");\n  const [lastname, setLastName] = useState(\"\");\n  const [clas, setClas] = useState();\n  const [year, setYear] = useState();\n  const [percentage, setPercentage] = useState();\n  const [valid, setValid] = useState(false);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    let testName = /^[A-Za-z]+$/;\n    let testClass = /^[A-Za-z0-9]+$/;\n    if (\n      name !== undefined &&\n      lastname !== undefined &&\n      clas !== undefined &&\n      year !== undefined &&\n      percentage !== undefined\n    ) {\n      if (!(testName.test(name) && name.length < 20)) {\n        setValid(false);\n      } else if (!(testName.test(lastname) && lastname.length < 20)) {\n        setValid(false);\n      } else if (!testClass.test(clas)) {\n        setValid(false);\n      } else if (year > 2017) {\n        setValid(false);\n        console.log(\"year\");\n      } else {\n        setValid(true);\n      }\n    }\n  }, [name, lastname, clas, percentage, year]);\n\n  console.log(name.error);\n\n  const submitForm = (e) => {\n    e.preventDefault();\n  };\n  const studentBoard = () => {\n    history.push(\"/\");\n  };\n  return (\n    <div className={styles.container}>\n      <div className={styles.btnContainer}>\n        <button onClick={() => studentBoard()} className={styles.btnStudent}>\n          Student Results\n        </button>\n      </div>\n      <form onSubmit={(e) => submitForm(e)} className={styles.form}>\n        <label className={styles.head}>Admission Form</label>\n\n        <label className={styles.label} for=\"name\">\n          Name\n        </label>\n        <input\n          type=\"text\"\n          className={styles.input}\n          id=\"name\"\n          onChange={(e) => setName(e.target.value)}\n          required\n        ></input>\n        <label className={styles.label} for=\"lastname\">\n          Last Name\n        </label>\n        <input\n          type=\"text\"\n          className={styles.input}\n          id=\"lastname\"\n          onChange={(e) => setLastName(e.target.value)}\n          required\n        ></input>\n        <label className={styles.label} for=\"class\">\n          Class\n        </label>\n        <input\n          type=\"text\"\n          className={styles.input}\n          id=\"class\"\n          onChange={(e) => setClas(e.target.value)}\n          required\n        ></input>\n        <label className={styles.label} for=\"year\">\n          Year\n        </label>\n        <input\n          type=\"number\"\n          className={styles.input}\n          id=\"year\"\n          onChange={(e) => setYear(e.target.value)}\n          required\n        ></input>\n        <label className={styles.label} for=\"per\">\n          Percentage\n        </label>\n        <input\n          type=\"number\"\n          className={styles.input}\n          id=\"for\"\n          onChange={(e) => setPercentage(e.target.value)}\n          required\n        ></input>\n        <button type=\"submit\" className={styles.btn} disabled={!valid}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AdmissionForm;\n","import React from \"react\";\nimport StudentResultBoard from \"./Components/StudentResultBoard/StudentResultBoard\";\nimport AdmissionForm from \"./Components/AdmissionForm/AdmissionForm\";\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={StudentResultBoard}></Route>\n          <Route exact path=\"/addmissionform\" component={AdmissionForm}></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StudentResultBoard_container__sfSO3\",\"table\":\"StudentResultBoard_table__2gfB2\",\"name\":\"StudentResultBoard_name__2SA0k\",\"title\":\"StudentResultBoard_title__3OQUg\",\"btnContainer\":\"StudentResultBoard_btnContainer__nzK1d\",\"btn\":\"StudentResultBoard_btn__mmOWm\"};"],"sourceRoot":""}